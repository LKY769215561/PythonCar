# -*- coding: UTF-8 -*-

'''
我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。



因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。

由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。

但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。

你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。
'''

'''
在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：
'''

print('包含中文的str')

'''
对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
'''

print(ord('A'))
print(ord('中'))
print(chr(66))
print(chr(25991))


'''
如果知道字符的整数编码，还可以用十六进制这么写str：
'''
print('\u4e2d\u6587')

'''
由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。
'''
x = b'ABC'
y = b'\xe4\xb8\xad\xe6\x96\x87'
print(x)
print('ABC'.encode('ascii'))
print('中文'.encode('utf-8'))
#print('中文'.encode('ascii'))

print(x.decode('ascii'))
print(y.decode('utf-8'))
print(len('ABC'))
print(len('中文'))
print(len('中文'.encode('utf-8')))

'''
最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似'亲爱的xxx你好！你xx月的话费是xx，余额是xx'之类的字符串，
而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。
'''
str1 = 'hello,%s' % 'world'
print(str1)
str2 = 'Hi, %s, you have $%d.' % ('Michael', 1000000)
print(str2)


'''
另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，
不过这种方式写起来比%要麻烦得多：
'''
str3 = 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
print(str3)


'''
小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出'xx.x%'，只保留小数点后1位：
'''

s1 = 72
s2 = 85
cha = s2 - s1
str4 = str3 = 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', cha)
print(str4)

